name: Docker Build and Push Microservices

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated)'
        required: false
        type: string

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  determine-services:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SERVICES="${{ inputs.services }}"
            CURRENT_SERVICE="${{ matrix.service_name }}"
            if [[ ",${SERVICES}," == *",${CURRENT_SERVICE},"* ]]; then
              echo "should-run=true" >> $GITHUB_OUTPUT
            else
              echo "should-run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: determine-services
    if: needs.determine-services.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service_name: "auth-api"
            service_context: "./auth-api"
            service_dockerfile: "./auth-api/Dockerfile"
          
          - service_name: "frontend"
            service_context: "./frontend"
            service_dockerfile: "./frontend/Dockerfile"
          
          - service_name: "log-message-processor"
            service_context: "./log-message-processor"
            service_dockerfile: "./log-message-processor/Dockerfile"
          
          - service_name: "todos-api"
            service_context: "./todos-api"
            service_dockerfile: "./todos-api/Dockerfile"
          
          - service_name: "users-api"
            service_context: "./users-api"
            service_dockerfile: "./users-api/Dockerfile"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service_context }}
        file: ${{ matrix.service_dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service_name }}:latest
          ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service_name }}:${{ github.sha }}
